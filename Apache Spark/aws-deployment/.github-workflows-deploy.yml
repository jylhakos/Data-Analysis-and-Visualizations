name: Deploy AirTraffic Analysis to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'emr'
        type: choice
        options:
        - emr
        - sagemaker
        - ec2

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: airtraffic-analysis

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyspark pandas numpy matplotlib notebook
    
    - name: Validate notebook
      run: |
        python quick_verify.py
    
    - name: Check AWS deployment scripts
      run: |
        chmod +x aws-deployment/*.sh
        bash -n aws-deployment/deploy-to-aws.sh
        bash -n aws-deployment/upload-data.sh

  deploy-staging:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Init
      working-directory: aws-deployment/terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: aws-deployment/terraform
      run: |
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}-staging"
    
    - name: Terraform Apply
      working-directory: aws-deployment/terraform
      run: |
        terraform apply -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}-staging"
    
    - name: Upload data to S3
      run: |
        BUCKET_NAME=$(cd aws-deployment/terraform && terraform output -raw s3_bucket_name)
        ./aws-deployment/upload-data.sh $BUCKET_NAME
    
    - name: Get deployment outputs
      working-directory: aws-deployment/terraform
      run: |
        echo "## Deployment Outputs" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸš€ EMR Cluster" >> $GITHUB_STEP_SUMMARY
        echo "- **JupyterHub URL**: $(terraform output -raw jupyter_url)" >> $GITHUB_STEP_SUMMARY
        echo "- **SSH Command**: $(terraform output -raw ssh_command)" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Deploy to Production
      working-directory: aws-deployment/terraform
      run: |
        terraform init
        terraform apply -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}-prod"
    
    - name: Upload production data
      run: |
        BUCKET_NAME=$(cd aws-deployment/terraform && terraform output -raw s3_bucket_name)
        ./aws-deployment/upload-data.sh $BUCKET_NAME
    
    - name: Notify deployment success
      run: |
        echo "ðŸŽ‰ Production deployment successful!" >> $GITHUB_STEP_SUMMARY
        echo "Production cluster is ready for use." >> $GITHUB_STEP_SUMMARY

  manual-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: manual
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Manual deployment
      run: |
        chmod +x aws-deployment/*.sh
        ./aws-deployment/deploy-to-aws.sh ${{ github.event.inputs.deployment_type }} ${{ env.AWS_REGION }}

  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Cleanup resources
      working-directory: aws-deployment/terraform
      run: |
        terraform init
        terraform destroy -auto-approve \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}-pr-${{ github.event.number }}"
